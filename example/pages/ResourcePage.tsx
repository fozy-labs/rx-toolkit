import React from 'react';
import { createResource, useResourceAgent, SKIP } from '@fozy-labs/rx-toolkit';
import { CodeBlock } from '../components/CodeBlock';

// –ú–æ–∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const fetchUser = async (userId: number) => {
    await new Promise(resolve => setTimeout(resolve, 1000));

    const users = [
        { id: 1, name: '–ê–ª–µ–∫—Å–µ–π –ò–≤–∞–Ω–æ–≤', email: 'alexey@example.com', role: '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', avatar: 'üë®‚Äçüíª' },
        { id: 2, name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞', email: 'maria@example.com', role: '–î–∏–∑–∞–π–Ω–µ—Ä', avatar: 'üë©‚Äçüé®' },
        { id: 3, name: '–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤', email: 'ivan@example.com', role: '–ú–µ–Ω–µ–¥–∂–µ—Ä', avatar: 'üë®‚Äçüíº' },
        { id: 4, name: '–ï–ª–µ–Ω–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞', email: 'elena@example.com', role: '–ê–Ω–∞–ª–∏—Ç–∏–∫', avatar: 'üë©‚Äçüíº' },
        { id: 5, name: '–î–º–∏—Ç—Ä–∏–π –°–º–∏—Ä–Ω–æ–≤', email: 'dmitry@example.com', role: '–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫', avatar: 'üë®‚Äçüî¨' },
    ];

    const user = users.find(u => u.id === userId);

    if (!user) {
        throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    return user;
};

const userStats = {
    1: { daily: [12, 3, 5], weekly: [67, 15, 28], monthly: [234, 48, 112] },
    2: { daily: [8, 2, 4], weekly: [45, 10, 20], monthly: [180, 35, 90] },
    3: { daily: [5, 1, 2], weekly: [30, 5, 12], monthly: [120, 20, 50] },
    4: { daily: [10, 4, 6], weekly: [55, 12, 25], monthly: [200, 40, 100] },
    5: { daily: [7, 2, 3], weekly: [40, 8, 15], monthly: [150, 30, 70] },
};

// –ú–æ–∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const fetchUserStats = async (args: { userId: number; period: string }) => {
    await new Promise(resolve => setTimeout(resolve, 800));

    // @ts-ignore
    const stats = userStats[args.userId][args.period];

    return {
        commits: stats[0],
        pullRequests: stats[1],
        reviews: stats[2],
    }
};

// –°–æ–∑–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
export const getUserResource = createResource({
    queryFn: fetchUser,
    cacheLifetime: 30000, // 30 —Å–µ–∫—É–Ω–¥
    async onQueryStarted(args, { $queryFulfilled }) {
        console.log('üë§ –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', args);
        try {
            const result = await $queryFulfilled;
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:', result);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
    },
});

export const getUserStatsResource = createResource({
    queryFn: fetchUserStats,
    cacheLifetime: 10000, // 10 —Å–µ–∫—É–Ω–¥
    async onQueryStarted(args, { $queryFulfilled }) {
        console.log('üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', args);
        try {
            const result = await $queryFulfilled;
            console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', result);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    },
});

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ useResourceAgent
function UserProfileSection() {
    const [selectedUserId, setSelectedUserId] = React.useState<number | null>(1);
    const [period, setPeriod] = React.useState<string>('daily');
    const [enableStats, setEnableStats] = React.useState(true);

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–º–µ–Ω—è—é—â–∏–º–∏—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    const userQuery = useResourceAgent(
        getUserResource,
        selectedUserId !== null ? selectedUserId : SKIP
    );

    const statsQuery = useResourceAgent(
        getUserStatsResource,
        enableStats && selectedUserId !== null
            ? { userId: selectedUserId, period }
            : SKIP
    );

    console.log('User Query State:', {
        userId: selectedUserId,
        dataUserId: userQuery.data?.id ?? null,
        args: userQuery.args,
        isInitiated: userQuery.isInitiated,
        isLoading: userQuery.isLoading,
        isReloading: userQuery.isReloading,
        isDone: userQuery.isDone,
    });

    return (
        <div className="demo-section">
            <h3>–í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>

            <div style={{ marginBottom: '20px' }}>
                <label style={{ display: 'block', marginBottom: '10px' }}>
                    <strong>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong>
                </label>
                <div style={{ display: 'flex', gap: '10px', flexWrap: 'wrap' }}>
                    {[1, 2, 3, 4, 5].map(id => (
                        <button
                            key={id}
                            onClick={() => setSelectedUserId(id)}
                            style={{
                                padding: '10px 20px',
                                background: selectedUserId === id ? '#1976d2' : '#e0e0e0',
                                color: selectedUserId === id ? 'white' : 'black',
                                border: 'none',
                                borderRadius: '4px',
                                cursor: 'pointer',
                                fontWeight: selectedUserId === id ? 'bold' : 'normal',
                            }}
                        >
                            {id}
                        </button>
                    ))}
                </div>
            </div>

            {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
            <div style={{
                padding: '20px',
                background: '#f5f5f5',
                borderRadius: '8px',
                marginBottom: '20px'
            }}>
                <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</h4>

                {selectedUserId === null && (
                    <div style={{ color: '#666', fontStyle: 'italic' }}>
                        ‚è∏Ô∏è –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω (SKIP)
                    </div>
                )}

                {userQuery.isLoading && (
                    <div className="loading">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...</div>
                )}

                {userQuery.isError && (
                    <div className="error">
                        ‚ùå –û—à–∏–±–∫–∞: {String(userQuery.error)}
                    </div>
                )}

                {userQuery.isSuccess && userQuery.data && (
                    <div style={{
                        display: 'flex',
                        gap: '15px',
                        alignItems: 'center',
                        padding: '15px',
                        background: 'white',
                        borderRadius: '8px',
                    }}>
                        <div style={{ fontSize: '48px' }}>
                            {userQuery.data.avatar}
                        </div>
                        <div>
                            <div style={{ fontSize: '20px', fontWeight: 'bold', marginBottom: '5px' }}>
                                {userQuery.data.name}
                            </div>
                            <div style={{ color: '#666', marginBottom: '3px' }}>
                                üìß {userQuery.data.email}
                            </div>
                            <div style={{ color: '#666' }}>
                                üíº {userQuery.data.role}
                            </div>
                        </div>
                    </div>
                )}
            </div>

            {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π */}
            <div style={{ marginBottom: '20px' }}>
                <label style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '15px' }}>
                    <input
                        type="checkbox"
                        checked={enableStats}
                        onChange={(e) => setEnableStats(e.target.checked)}
                        style={{ width: '20px', height: '20px' }}
                    />
                    <strong>–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</strong>
                </label>

                {enableStats && (
                    <div>
                        <label style={{ display: 'block', marginBottom: '10px' }}>
                            <strong>–ü–µ—Ä–∏–æ–¥:</strong>
                        </label>
                        <div style={{ display: 'flex', gap: '10px' }}>
                            {[
                                { value: 'daily', label: '–î–µ–Ω—å' },
                                { value: 'weekly', label: '–ù–µ–¥–µ–ª—è' },
                                { value: 'monthly', label: '–ú–µ—Å—è—Ü' },
                            ].map(({ value, label }) => (
                                <button
                                    key={value}
                                    onClick={() => setPeriod(value)}
                                    style={{
                                        padding: '10px 20px',
                                        background: period === value ? '#388e3c' : '#e0e0e0',
                                        color: period === value ? 'white' : 'black',
                                        border: 'none',
                                        borderRadius: '4px',
                                        cursor: 'pointer',
                                        fontWeight: period === value ? 'bold' : 'normal',
                                    }}
                                >
                                    {label}
                                </button>
                            ))}
                        </div>
                    </div>
                )}
            </div>

            {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
            <div style={{
                padding: '20px',
                background: '#f5f5f5',
                borderRadius: '8px'
            }}>
                <h4>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</h4>

                {!enableStats && (
                    <div style={{ color: '#666', fontStyle: 'italic' }}>
                        ‚è∏Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (SKIP)
                    </div>
                )}

                {enableStats && selectedUserId === null && (
                    <div style={{ color: '#666', fontStyle: 'italic' }}>
                        ‚è∏Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    </div>
                )}

                {enableStats && statsQuery.isLoading && (
                    <div className="loading">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</div>
                )}

                {enableStats && statsQuery.isError && (
                    <div className="error">
                        ‚ùå –û—à–∏–±–∫–∞: {String(statsQuery.error)}
                    </div>
                )}

                {enableStats && statsQuery.isSuccess && statsQuery.data && (
                    <div style={{
                        display: 'grid',
                        gridTemplateColumns: 'repeat(3, 1fr)',
                        gap: '15px',
                        padding: '15px',
                        background: 'white',
                        borderRadius: '8px',
                    }}>
                        <div style={{ textAlign: 'center' }}>
                            <div style={{ fontSize: '32px', fontWeight: 'bold', color: '#1976d2' }}>
                                {statsQuery.data.commits}
                            </div>
                            <div style={{ color: '#666', fontSize: '14px' }}>
                                –ö–æ–º–º–∏—Ç—ã
                            </div>
                        </div>
                        <div style={{ textAlign: 'center' }}>
                            <div style={{ fontSize: '32px', fontWeight: 'bold', color: '#388e3c' }}>
                                {statsQuery.data.pullRequests}
                            </div>
                            <div style={{ color: '#666', fontSize: '14px' }}>
                                Pull Requests
                            </div>
                        </div>
                        <div style={{ textAlign: 'center' }}>
                            <div style={{ fontSize: '32px', fontWeight: 'bold', color: '#f57c00' }}>
                                {statsQuery.data.reviews}
                            </div>
                            <div style={{ color: '#666', fontSize: '14px' }}>
                                –†–µ–≤—å—é
                            </div>
                        </div>
                    </div>
                )}
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ */}
            <div style={{
                marginTop: '20px',
                padding: '15px',
                background: '#e3f2fd',
                borderRadius: '8px',
                fontSize: '12px',
                fontFamily: 'monospace'
            }}>
                <div><strong>–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤:</strong></div>
                <div>
                    üë§ User:
                    isInitiated={String(userQuery.isInitiated)},
                    isLoading={String(userQuery.isLoading)},
                    isReloading={String(userQuery.isReloading)},
                    isSuccess={String(userQuery.isSuccess)}
                </div>
                <div>
                    üìä Stats:
                    isInitiated={String(statsQuery.isInitiated)},
                    isLoading={String(statsQuery.isLoading)},
                    isReloading={String(userQuery.isReloading)},
                    isSuccess={String(statsQuery.isSuccess)}
                </div>
            </div>
        </div>
    );
}

const resourceCode = `
export const getUserResource = createResource({
    queryFn: fetchUser,
    cacheLifetime: 30000,
});

export const getUserStatsResource = createResource({
    queryFn: fetchUserStats,
    cacheLifetime: 10000,
});

function UserProfileSection() {
    const [selectedUserId, setSelectedUserId] = useState<number | null>(1);
    const [period, setPeriod] = useState<string>('daily');
    const [enableStats, setEnableStats] = useState(true);
    
    // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ selectedUserId –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    const userQuery = useResourceAgent(
        getUserResource, 
        selectedUserId !== null ? selectedUserId : SKIP
    );
    
    // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ userId –∏–ª–∏ period —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    const statsQuery = useResourceAgent(
        getUserStatsResource,
        enableStats && selectedUserId !== null 
            ? { userId: selectedUserId, period } 
            : SKIP
    );
    
    // –°—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω—è—é—Ç—Å—è
    // –ù–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫–µ—à –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ
    
    return (
        // ...
    );
}`;

export function ResourcePage() {
    return (
        <div className="example-page">
            <div className="example-header">
                <h1>üîÑ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã</h1>
                <p>
                    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã useResourceAgent —Å –∏–∑–º–µ–Ω—è—é—â–∏–º–∏—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏.
                    –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ö—É–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å,
                    –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–µ—à –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SKIP –¥–ª—è
                    —É—Å–ª–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤.
                </p>
            </div>

            <div className="example-content">
                <div>
                    <UserProfileSection />
                </div>

                <div className="code-panel">
                    <CodeBlock code={resourceCode} />
                </div>
            </div>
        </div>
    );
}

